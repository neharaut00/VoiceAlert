<!DOCTYPE html>
<html>

<head>
  <title>Analytics</title>
  <link href="index.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://kit.fontawesome.com/b99e675b6e.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <script src="https://gist.github.com/emeeks/3361332/raw/61cf57523fe8cf314333e5f60cc266351fec2017/d3.layout.cloud.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/d3-cloud/1.2.5/d3.layout.cloud.js"></script>
  <style>
    /* Define the color styles for each emotion with dynamic intensity */
    .cell-anger {
      background-color: rgba(255, 0, 0, 0.5);
      color: white
    }

    .cell-sadness {
      background-color: rgba(0, 0, 255, 0.5);
      color: white
    }

    .cell-neutral {
      background-color: rgba(0, 128, 0, 0.5);
      color: white
    }

    .cell-joy {
      background-color: rgba(255, 255, 0, 0.5);
      color: black
    }

    .cell-shame {
      background-color: skyblue;
      color: black
    }

    .cell-fear {
      background-color: rgba(128, 0, 128, 0.5);
      color: white
    }

    .cell-disgust {
      background-color: rgba(237, 231, 225, 0.5);
      color: black
    }

    .cell-surprise {
      background-color: rgba(255, 192, 203, 0.5);
      color: black
    }



  
    /* Additional styles for color labels */
    .color-label {
      width: 20px;
      height: 20px;
      display: inline-block;
      margin-top: 10px;
      margin-left: 10px;
    }

    .color-label-angry {
      background-color: rgba(255, 0, 0, 0.5);
      color: rgba(255, 0, 0, 1);
    }

    .color-label-sad {
      background-color: rgba(0, 0, 255, 0.5);
    }

    .color-label-neutral {
      background-color: rgba(0, 128, 0, 0.5);
    }

    .color-label-happy {
      background-color: rgba(255, 255, 0, 0.5);
     
    }

    .color-label-shame {
      background-color: skyblue;
      
    }

    .color-label-fear {
      background-color: rgba(128, 0, 128, 0.5);
      
    }

    .color-label-disgust {
      background-color: rgba(237, 231, 225, 0.5);
      
    }

    .color-label-surprise {
      background-color: rgba(255, 192, 203, 0.5);
      
    }

    .color-label-none {
      background-color: white;
      opacity: 50%;
      border: lightgrey solid 0.2px;
    }
   

  </style>
</head>

<body>
  <div class="app-window">
    <div class="sidebar">
      <h2>Voice Alert</h2>
      <ul>
        <li class="item"><a href="/"><i class="fas fa-phone"></i> Ongoing Call</a></li>
        <li class="item"><a href="/callHistory"><i class="fas fa-address-card"></i> Calls History</a></li>
        <li class="item selected"><a href="/analytics"><i class="fas fa-project-diagram"></i> Analytics</a></li>
      </ul>
    </div>

    <div class="app-column wide">
      <div class="app-column-chart">
      <div class="pie-chart">
      <h1>Voice Emotion Pie Chart</h1>
      <div id="chartContainer" style="width: 55%;">
        <canvas id="emotionChart" width="400" height="400"></canvas>
      </div>
    </div>
    <div class="emotion-heatmap">
      <h1>Emotion Heatmap</h1>
      <table>
        <tr>
         
          <td class="">12am - 6am</td>
            <td class="">6am - 12pm</td>
            <td class="">12pm - 6pm</td>
            <td class="">6pm - 12am</td>
        </tr>

        <% for (let row = 0; row < 6; row++) { %>
          
          <tr>
            
            <% for (let col = 0; col < 4; col++) { %>
              <% const index = col * 6 + row; %>
              <% const emotions = heatmapdata[index]; %>
              <% const maxEmotion = Object.keys(emotions).reduce((a, b) => emotions[a] > emotions[b] ? a : b); %>
              <% const count = emotions[maxEmotion]; %>
              <% if (count === 0) { %>
                <td class="cell-none" style="background-color: white; opacity: 50%; border: lightgrey solid 0.2px">
                  <%= count %>
                </td>
              <% } else {%>
                <td class="cell-<%= maxEmotion %>">
                  <%= count %>
                </td>
              <% } %>
            <% } %>
          </tr>
        <% } %>
      </table>
   
      <div>
        <span class="color-label color-label-happy"></span> Joy
        <span class="color-label color-label-sad"></span> Sadness
        <span class="color-label color-label-fear"></span> Fear
        <span class="color-label color-label-angry"></span> Anger
        <span class="color-label color-label-surprise"></span> Surprise
        <span class="color-label color-label-neutral"></span> Neutral
        <span class="color-label color-label-disgust"></span> Disgust
        <span class="color-label color-label-shame"></span> Shame
        <span class="color-label color-label-none"></span> None
      </div>
    </div>
  </div>
    <div class="wordcloud-container">
      <h1>Word Cloud</h1>
      <div id="word-cloud">
        <!-- Word cloud will be displayed here -->
      </div>
    </div>
    </div>

  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {

      const ctx = document.getElementById('emotionChart').getContext('2d');
      const labels = JSON.parse`<%-JSON.stringify(emotionsData.labels)%>`;
      const data = JSON.parse`<%-JSON.stringify(emotionsData.data)%>`;
      const colors = [
      'rgba(255, 0, 0, 0.5)',
      'rgba(0, 0, 255, 0.5)',
      'rgba(0, 128, 0, 0.5)',
      'rgba(255, 255, 0, 0.5)',
      'skyblue',
      'rgba(128, 0, 128, 0.5)',
    ];

      if (Array.isArray(labels)) {
        chart = new Chart(ctx, {
          type: 'pie',
          data: {
            labels: labels,
            datasets: [{
              data: data,
              backgroundColor: colors,
            }],
          },
        });
      } else {
        console.error('Error: Labels is not an array.');
      }

  const wordcloudData =  JSON.parse(`<%- JSON.stringify(wordcloudData) %>`);
  console.log(wordcloudData)
  const width = 500; // Set the width of the word cloud container
  const height = 300; // Set the height of the word cloud container

  const svg = d3.select('#word-cloud')
    .append('svg')
    .attr('width', width)
    .attr('height', height)
    .append('g')
    .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');

  const fontSizeScale = d3.scaleLinear()
    .domain([0, d3.max(wordcloudData, d => d.size)])
    .range([10, 50]); // Set the range of font sizes

  const wordCloud = d3.layout.cloud()
    .size([width, height])
    .words(wordcloudData)
    .padding(5)
    .rotate(() => (Math.random() > 0.5 ? 90 : 0)) // Randomly rotate words
    .font('Arial')
    .fontSize(d => fontSizeScale(d.size))
    .on('end', draw);

  wordCloud.start();

  function draw(words) {
    svg.selectAll('text')
      .data(words)
      .enter().append('text')
      .style('font-size', d => d.size + 'px')
      .style('fill', (d, i) => d3.schemeCategory10[i % 10]) // Use color scheme
      .attr('transform', d => 'translate(' + [d.x, d.y] + ')rotate(' + d.rotate + ')')
      .text(d => d.text);
  }
    });
  </script>
</body>

</html>
